"use strict";define(["app"],function(app){app.provider("Logger",[function(){function isObject(element){var elemStr=angular.isUndefined(element)||angular.isUndefined(element.constructor)?"":element.constructor.toString();return elemStr.indexOf("Object")>-1}var isEnabled=!0;this.enabled=function(_isEnabled){isEnabled=!!_isEnabled},this.$get=["$log",function($log){var Logger=function(context){this.context=context};return Logger.getInstance=function(context){return new Logger(context)},Logger.supplant=function(str,o){return str.replace(/\{([^{}]*)\}/g,function(a,b){var r=o[b];return"string"==typeof r||"number"==typeof r?r:a})},Logger.getFormattedTimestamp=function(date){return Logger.supplant("{0}:{1}:{2}:{3}",[date.getHours(),date.getMinutes(),date.getSeconds(),date.getMilliseconds()])},Logger.prototype={_log:function(originalFn,args){if(isEnabled){var now=Logger.getFormattedTimestamp(new Date),message="",supplantData=[];switch(args.length){case 1:message=Logger.supplant("{0} - {1}: {2}",[now,this.context,args[0]]);break;case 3:supplantData=args[2],message=Logger.supplant("{0} - {1}::{2}('{3}')",[now,this.context,args[0],args[1]]);break;case 2:"string"==typeof args[1]?message=Logger.supplant("{0} - {1}::{2}('{3}')",[now,this.context,args[0],args[1]]):(supplantData=args[1],message=Logger.supplant("{0} - {1}: {2}",[now,this.context,args[0]]))}var params=isObject(supplantData)?[message,supplantData]:[Logger.supplant(message,supplantData)];$log[originalFn].apply(null,params)}},log:function(){this._log("log",arguments)},info:function(){this._log("info",arguments)},warn:function(){this._log("warn",arguments)},debug:function(){this._log("debug",arguments)},error:function(){this._log("error",arguments)}},Logger}]}])});